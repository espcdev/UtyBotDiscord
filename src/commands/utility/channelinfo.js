const { SlashCommandBuilder, ChannelType, PermissionsBitField, EmbedBuilder } = require('discord.js');
const { createEmbed, colors } = require('../../utils/embeds');
const ms = require('ms');

// Helper para convertir tipo de canal a texto
function getChannelTypeText(type) {
    switch (type) {
        case ChannelType.GuildText: return 'Texto';
        case ChannelType.GuildVoice: return 'Voz';
        case ChannelType.GuildCategory: return 'Categor√≠a';
        case ChannelType.GuildAnnouncement: return 'Anuncios';
        case ChannelType.GuildStageVoice: return 'Escenario (Stage)';
        case ChannelType.GuildForum: return 'Foro';
        case ChannelType.GuildMedia: return 'Media';
        // A√±adir otros si son relevantes (hilos, etc.)
        default: return `Desconocido (${type})`;
    }
}

module.exports = {
    data: new SlashCommandBuilder()
        .setName('channelinfo')
        .setDescription('Muestra informaci√≥n detallada sobre un canal.')
        .addChannelOption(option =>
            option.setName('canal')
                .setDescription('El canal del que quieres obtener informaci√≥n (opcional, por defecto el actual).')
                // Permitir la mayor√≠a de tipos visibles
                .addChannelTypes(
                     ChannelType.GuildText, ChannelType.GuildVoice, ChannelType.GuildCategory,
                     ChannelType.GuildAnnouncement, ChannelType.GuildStageVoice, ChannelType.GuildForum,
                     ChannelType.GuildMedia
                )
                .setRequired(false)),
    // No requiere permisos especiales m√°s all√° de ver el canal

    async execute(interaction) {
        const channel = interaction.options.getChannel('canal') || interaction.channel;

        await interaction.deferReply();

        // Forzar fetch para datos actualizados (topic, etc.)
        try {
             await channel.fetch(true);
        } catch (err) {
             console.error(`[ChannelInfo] Error al forzar fetch del canal ${channel.id}: ${err.message}`);
             return interaction.editReply({ embeds: [createErrorEmbed('No se pudo obtener informaci√≥n actualizada del canal.')] });
        }

        const embed = createEmbed(`Informaci√≥n del Canal: #${channel.name}`, `ID: ${channel.id}`)
            .setColor(colors.default)
            .addFields(
                { name: 'üè∑Ô∏è Nombre', value: channel.name, inline: true },
                { name: 'üÜî ID', value: channel.id, inline: true },
                { name: 'üîó Menci√≥n', value: `${channel}`, inline: true }, // Menci√≥n clicable
                { name: 'üìÖ Creado', value: `<t:${Math.floor(channel.createdTimestamp / 1000)}:R>`, inline: true },
                { name: 'üìå Posici√≥n', value: `${channel.position}`, inline: true },
                { name: 'üìÅ Tipo', value: getChannelTypeText(channel.type), inline: true },
            );

        // Campos espec√≠ficos por tipo de canal
        if (channel.parent) { // Si est√° en una categor√≠a
            embed.addFields({ name: 'üìÇ Categor√≠a', value: channel.parent.name, inline: true });
        }

        if (channel.isTextBased() && !channel.isVoiceBased()) { // Canales de Texto, Anuncios, Foros, etc.
            embed.addFields(
                { name: 'üìù T√≥pico', value: channel.topic?.substring(0, 1020) || 'Ninguno', inline: false }, // Acortar t√≥pico
                { name: 'üîû ¬øNSFW?', value: channel.nsfw ? 'S√≠' : 'No', inline: true },
                { name: '‚è≥ Modo Lento', value: channel.rateLimitPerUser ? ms(channel.rateLimitPerUser * 1000, { long: true }) : 'Desactivado', inline: true }
            );
             // Para Foros, podr√≠as a√±adir info sobre tags disponibles, slowmode de posts, etc.
             if(channel.type === ChannelType.GuildForum && channel.availableTags) {
                 const tags = channel.availableTags.map(t => t.name).join(', ');
                 embed.addFields({name: 'üè∑Ô∏è Tags Disponibles', value: tags || 'Ninguno', inline: false});
             }

        } else if (channel.isVoiceBased()) { // Canales de Voz, Stage
            embed.addFields(
                { name: 'üîä Bitrate', value: `${channel.bitrate / 1000} kbps`, inline: true },
                { name: 'üë• L√≠mite Usuarios', value: channel.userLimit > 0 ? `${channel.userLimit}` : 'Sin l√≠mite', inline: true },
                //{ name: 'üåç Regi√≥n', value: channel.rtcRegion || 'Autom√°tico', inline: true } // Regi√≥n RTC si est√° configurada
            );
             if (channel.type === ChannelType.GuildStageVoice) {
                 // Informaci√≥n espec√≠fica de Stage si es necesario (ej. topic)
                  embed.addFields({ name: 'üìù T√≥pico (Stage)', value: channel.topic?.substring(0, 1020) || 'Ninguno', inline: false });
             }
        }
        // Para Categor√≠as, podr√≠as listar los canales que contiene
         else if (channel.type === ChannelType.GuildCategory) {
             const channelsInCategory = interaction.guild.channels.cache
                 .filter(c => c.parentId === channel.id)
                 .map(c => c.name)
                 .join(', ');
             embed.addFields({ name: 'üìä Canales en Categor√≠a', value: channelsInCategory.substring(0, 1020) || 'Ninguno', inline: false });
         }

        // Mostrar permisos del bot en el canal (√∫til para depuraci√≥n)
         try {
             const botMember = await interaction.guild.members.fetch(interaction.client.user.id);
             const botPermissions = channel.permissionsFor(botMember);
             if (botPermissions) {
                 const keyPerms = ['ViewChannel', 'SendMessages', 'Connect', 'Speak', 'EmbedLinks', 'AttachFiles', 'ManageMessages']
                     .filter(p => botPermissions.has(PermissionsBitField.Flags[p]))
                     .map(p => `\`${p}\``); // Mapear a formato de c√≥digo

                 embed.addFields({ name: 'ü§ñ Permisos del Bot (Clave)', value: keyPerms.length > 0 ? keyPerms.join(', ') : 'Ninguno relevante', inline: false });
             }
         } catch (permError) {
             console.warn(`[ChannelInfo] Error obteniendo permisos del bot para ${channel.id}: ${permError.message}`);
         }


        await interaction.editReply({ embeds: [embed] });
    },
};
